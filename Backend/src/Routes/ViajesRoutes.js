// Routes/ViajesRoutes.js - RUTAS OPTIMIZADAS Y FUNCIONALES
import express from "express";
import ViajesController from "../Controllers/Viajes.js";

const router = express.Router();

// =====================================================
// üÜï RUTAS PRINCIPALES DE GESTI√ìN DE VIAJES
// =====================================================

// üöõ CREAR NUEVO VIAJE
router.post("/", ViajesController.addTrip);

// üöõ GESTI√ìN DE RECURSOS
router.put("/:viajeId/assign-resources", ViajesController.assignResources);
router.put("/:viajeId/start", ViajesController.startTrip);

// üöõ GESTI√ìN MASIVA Y CLONACI√ìN
router.put("/bulk-update", ViajesController.bulkUpdateTrips);
router.post("/:viajeId/clone", ViajesController.cloneTrip);

// üöõ VIAJES DISPONIBLES
router.get("/available", ViajesController.getAvailableTrips);

// =====================================================
// üìä RUTAS DE DASHBOARD Y M√âTRICAS
// =====================================================

// üìä DASHBOARD COMPLETO
router.get("/dashboard", ViajesController.getDashboard);

// üìä M√âTRICAS EN TIEMPO REAL
router.get("/real-time-metrics", ViajesController.getRealTimeMetrics);

// =====================================================
// üìç RUTAS DEL MAPA Y DATOS EN TIEMPO REAL
// =====================================================

// üó∫Ô∏è DATOS DEL MAPA
router.get("/map-data", ViajesController.getMapData);

// =====================================================
// üìä RUTAS DE AN√ÅLISIS Y ESTAD√çSTICAS
// =====================================================

// üì¶ AN√ÅLISIS DE CARGAS
router.get("/carga-distribution", ViajesController.getCargaDistribution);
router.get("/tipos-cargas", ViajesController.getTiposDeCargas);
router.get("/carga-stats", ViajesController.getCargaStats);

// üìà ESTAD√çSTICAS DE VIAJES
router.get("/trip-stats", ViajesController.getTripStats);

// =====================================================
// üìÖ RUTAS DE ORGANIZACI√ìN TEMPORAL
// =====================================================

// üìÖ VIAJES ORGANIZADOS POR D√çAS
router.get("/por-dias", ViajesController.getViajesPorDias);

// üìÖ VIAJES COMPLETADOS
router.get("/completed", ViajesController.getCompletedTrips);

// =====================================================
// üöõ RUTAS DE GESTI√ìN DE VIAJES INDIVIDUALES
// =====================================================

// üìã OBTENER TODOS LOS VIAJES
router.get("/all", ViajesController.getAllViajes);

// üìã DETALLES DE VIAJE ESPEC√çFICO
router.get("/:viajeId", ViajesController.getTripDetails);

// üìç ACTUALIZACI√ìN DE UBICACI√ìN GPS
router.patch("/:viajeId/location", ViajesController.updateLocation);

// üìä ACTUALIZACI√ìN DE PROGRESO
router.patch("/:viajeId/progress", ViajesController.updateTripProgress);

// ‚úÖ COMPLETAR VIAJE MANUALMENTE
router.patch("/:viajeId/complete", ViajesController.completeTrip);

// =====================================================
// üîß MIDDLEWARE DE VALIDACI√ìN (OPCIONAL)
// =====================================================

// Middleware para validar ObjectId en par√°metros
router.param('viajeId', (req, res, next, viajeId) => {
  if (!/^[0-9a-fA-F]{24}$/.test(viajeId)) {
    return res.status(400).json({
      success: false,
      message: "ID de viaje inv√°lido",
      error: "El ID debe ser un ObjectId v√°lido de MongoDB"
    });
  }
  next();
});



export default router;